using Catlab.CategoricalAlgebra
using Catlab.Graphs
using Catlab.Present
using Catlab.Theories

using Catlab.CategoricalAlgebra.FinCats: FinCatGraphEq

"""
Based on "Categorical Foundations of Distributed Graph Transformation"



"""
# Get schemadesc for Graph (surely there's an easier way?)

const ACSetCat{S} = TypeCat{S,ACSetTransformation}
const Grph = ACSetCat{Graph}
# Functor D: J → Grph (or some other ACSet)
const DistACSet{S,D} = Diagram{id, ACSetCat{S}, D}
# Start with two diagrams: D: J→Grph, D': J'→Grph
# F is a functor J->J'. Φ is a nat.trans. D⇒F⋅D'
const DistACSetHom{S, F,Φ,D} = DiagramHom{id, ACSetCat{S},F,Φ,D}
const DistGraph{D} = DistACSet{Graph,D}
const DistGrphHom{F,Φ,D} = DistACSetHom{Graph,F,Φ,D}


""" Category generated by a finite graph where all paths commute."""
function CommutingGraph(g::HasGraph)
  pths = vcat([zip(ps, ps[2:end]) for ps in values(enumerate_paths(g))
              if length(ps)>1]...)
  FinCatGraphEq(g, ((x,y)->x=>y).(pths))
end

comm_square = Graph(4)
add_edges!(comm_square, [1,1,2,3],[2,3,4,4])
J = FinCatGraph(comm_square, [[1,3]=>[2,4]])

p3 = path_graph(Graph, 3)
p2_w_loop = @acset Graph begin V=2; E=2; src=[1,1]; tgt=[1,2] end
p3_w_loop = @acset Graph begin V=3; E=3; src=[1,1,2]; tgt=[1,2,3] end
p2_w_loops = @acset Graph begin V=2; E=3; src=[1,1,2]; tgt=[1,2,2] end

# we can get to p2 w loops in two equivalent ways
h1 = homomorphism(p3, p2_w_loop; monic=[:E])
h2 = homomorphism(p2_w_loop, p2_w_loops; monic=true)
h3 = ACSetTransformation(p3, p3_w_loop; V=[1,1,2],E=[1,2])
h4 = ACSetTransformation(p3_w_loop, p2_w_loops; V=[1,2,2], E=[1,2,3])
@assert all(is_natural.([h1,h2,h3,h4]))
@assert force(compose(h1,h2)) == force(compose(h3,h4))

# Diagram into Grph
grph_diagram(o::Vector,h::Vector,g::Graph)::Diagram =
  Diagram(FinDomFunctor(o,h, CommutingGraph(g)))

D = Diagram(FinDomFunctor([p3,p2_w_loop,p3_w_loop,p2_w_loops],
                          [h1,h2,h3,h4], J))

# Examples from the paper
@present ThDisC(FreeSchema) begin
  (I, S, C, M)::Ob
  Name::AttrType
  si::Hom(S,I)
  ci::Hom(C,I)
  ms::Hom(M,S)
  mc::Hom(M,C)
  sn::Attr(S,Name)
  cn::Attr(C,Name)
  (from,to,text)::Attr(M,Name)
end

@acset_type DisC_generic(ThDisC)
DisC = DisC_generic{String}

i = @acset DisC begin I=1 end
hi = g -> homomorphism(i,g)
q2_L_ = @acset DisC begin I=1; S=1; si=[1]; cn=["s"] end
q2_R_ =  @acset DisC begin I=1; C=1; ci=[1]; cn=["x"] end
q2_L = grph_diagram([q2_L_], [], Graph(1))
Gspan = @acset Graph begin V=3; E=2; src=[1,1]; tgt=[2,3] end
q2_R = grph_diagram([i, q2_L_, q2_R_], [hi(q2_L_), hi(q2_R_)], Gspan)
g3 = @acset Graph begin V=7; E=6; src=[1,1,2,2,3,3]; tgt=[4,5,4,5,6,7] end
c1, c2 = [@acset(DisC, begin I=1; C=1; ci=[1]; cn=["C$n"] end) for n in 1:2]
s1, s2 = [@acset(DisC, begin I=1; S=1; si=[1]; sn=["S$n"] end) for n in 1:2]
fig3 = Diagram(FinDomFunctor([i,i,i,s1,s2,c1,c2], hi.([s1,s2,s1,s2,c1,c2]),
               FinCatGraph(g3)))
m = DiagramHom{id}([1],[], q2_L, fig3);
r = DiagramHom{id}([1],[], q2_L, q2_R);